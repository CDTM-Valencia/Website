// This file is auto-generated. Do not edit manually.
import { challenges, Project } from "./projects-page-config";

export const projects: Project[] = [
  {
    "id": "project-1",
    "name": "Client Vision",
    "case": "IBM",
    "whatIsProject": "We built an automated pre-meeting intelligence platform that transforms calendar events into tailored briefings for enterprise sales agents. For each meeting it aggregates public data about the attendee and their employer, job history, company activity, sector benchmarks, and financial indicators. Agents can request deeper context via an integrated conversational AI that pulls structured sources on demand.",
    "howBuilt": "We built a full-stack consultant dashboard using a modern, secure tech stack. The backend is Node.js/Express with MongoDB for data persistence and caching, integrated with Google OAuth 2.0 for secure authentication and authorization, Google Calendar API for meeting sync, OpenAI GPT-4o mini for AI insights, and Tavily API for company research. Security is enhanced through OAuth, session management, and comprehensive logging for audit trails. The frontend is React 18 with Material-UI 3 for professional design and Vite for development. We implemented intelligent caching to optimize API calls, Unicode support for international names, and automated meeting preparation with AI-powered attendee research. The architecture follows RESTful patterns with secure OAuth flows and production-ready logging",
    "difficulties": "Crucial time was spent in the beginning of the hackathon deciding on a project. We came prepared with suggestions based off of the case description but ended up pivoting. Once we had divided the work and gotten started, we soon ran into the issue of not being able to work on the code in parallel, causing a bottleneck.",
    "oneSentencePitch": "ClientVision is a web app that automatically generates concise, actionable client briefing reports, helping consultants prepare for meetings faster and smarter.",
    "githubUrl": "https://github.com/javierferrersb/cdtm-hackathon",
    "videoUrl": "https://www.youtube.com/watch?v=NSThZbX8T1g",
    "demoUrl": "https://www.youtube.com/watch?v=NSThZbX8T1g",
  },
  {
    "id": "project-2",
    "name": "RFP Complex Solver",
    "case": "NTT Data",
    "whatIsProject": "Our project is an AI-powered RFP (Request for Proposal) analysis and validation platform designed specifically for NTT DATA consultants. It automatically processes RFP documents using a cascade of Large Language Models (LLMs) to extract key information, generate structured initial response documents, and validate compliance by cross-referencing against the original text. This saves consultants significant time, minimizes manual review errors, and ensures proposal completeness by providing instant feedback on missing elements. Our unique, multi-LLM validation chain guarantees high accuracy and deliverable quality.",
    "howBuilt": "Our project is built on a modern, modular technology stack. The web application (both front-end and back-end) is rapidly deployed using Lovable. The core intelligence relies on Python, specifically leveraging the Ollama framework to manage and run our specialized Large Language Models (LLMs) for data extraction and validation. This allows us to run models locally and efficiently. All development, collaboration, and version control are managed using Git and hosted on GitHub to ensure a shared, robust, and traceable code repository. This stack provides flexibility and high performance for complex natural language processing tasks.",
    "difficulties": "We tackled several difficulties. Aligning diverse ideas on the project's direction required collaborative discussion and creative problem-solving to define a unified final solution. Technically, integrating all the programs and LLM components within the back-end presented significant data structure and integration challenges. We also faced the non-trivial task of accurately determining and prioritizing the most critical variables to extract from the complex RFP documents.",
    "oneSentencePitch": "Our platform solves RFP complexity by leveraging cascaded LLMs that accurately extract key information, generate a complete response document, and instantly check its validity.",
    "githubUrl": "https://github.com/gandpablo/proposal-analyzer-ai/issues",
    "videoUrl": "https://www.youtube.com/watch?v=I6Ej3eN3FLk",
    "demoUrl": "https://lovable.dev/projects/c38ef3bc-1c98-4731-af27-94980fb9eee3?magic_link=mc_3accadea-f851-473a-83dd-5bfc5ba5a7cc",
  },
  {
    "id": "project-3",
    "name": "Mental Touch",
    "case": "Leaping AI",
    "whatIsProject": "The WHO now says \"nearly 1 in 7\" people live with a mental disorder. With ~8.23 billion people today, that's roughly ~1.18 billion worldwide. In Spain we have 4.9 million diagnosed officially, 3.1 of which are diagnosed with depression or anxiety. A 2025 European survey found 22% currently use health apps, and a 2024 study in Portugal found 31% had used digital mental-health apps. What it does: Companion - Having a friendly companion 24/7, Moral support and motivation. Mental tracker - Includes Companion, Let your doctor to track your state using call information, Scheduled reminders (pills, physical activity), Reduces doctor's workload (less meetings needed). Who it's for: Companion - People who needs a companion / someone to listen, People with luck of motivation or in a hard situation. Mental tracker - For clinics to help them track patient state and lower the pressure on doctors, For patients with mental problems. Why itÂ´s unique: Voice, Close to the people who aren't familiar with technologies, Sense of a purpose who those in need, Adaptive to the user, Works in pair with medical personal",
    "howBuilt": "First, we have been using Miro to work on the ideas and road map. After that we have been using Lovable for coding and database creation, based on React and Supabase accordingly, also we have used a Leaping AI API to receive post messages. Also we have constructed a dialog system based on Leaping AI interface",
    "difficulties": "Quadracore faced challenges integrating the database into Lovable, while Leaping AI, though intuitive, demanded a steep learning curve within our 4-hour sprint. Yet, our team rose to the occasion challenging us to defend ideas, stay adaptable, and foster open communication. By prioritizing together what mattered, we aligned and moved forward with a common goal.",
    "oneSentencePitch": "Our project provides a 24/7 AI chatbot specialized in moral support and motivation for a user, but also has a service for clinics working with psychologists to reduce their load",
    "githubUrl": "https://github.com/JaumeBQ/mind-stream-aid.git",
    "videoUrl": "https://youtu.be/_PPwAtZ_fBw",
    "demoUrl": "http://mind-stream-aid.lovable.app",
    "placement":1
  },{
    "id": "project-4",
    "name": "Cognition Crew",
    "case": "IBM",
    "whatIsProject": "Welcome to the revolution of productivity! Are you tired of delaying your work due to simple, repetitive and boring tasks? Don't you worry, we have the solutions. You won't have to bother about wasting more time organising reunions, taking notes or researching your clients. Our AI assistant \"Watty\" is here to organise your schedule basing it on your emails, will summarise your meetings providing highlights and suggestions for the next one and even will analyse financial reports about your clients or competitors giving insides on how to negotiate.",
    "howBuilt": "We first thought about the user needs, pains and challenges. Then we used Figma to design a solutions with a conceptual map of what the workflow of the agentic system should be. Then we designed with Lovable a front end for the user, faking an security and log-in system. We also simulated a chatbot UI and then recreated it with gemini to power it (because we had problems with Lovable permissions). We created fake data to feed the model so it can have realistic conversations. The final version will run on the recently launched granite 4.0 model and on watsonx platform for orchestration. Why? Granite 4.0's architecture is designed for extreme efficiency, Tiny's high score on IFEval (Instruction Following) highlights its specific tuning for agentic workflows",
    "difficulties": "First we had a really tight time line to build our idea, then we also had the language barrier as one of our members does not speak Spanish which is something that the rest have in common, that's why everyone put in their effort to speak English even though is not our main language. Another difficulty was that the team only had two programmers and they were inexperienced with Lovable tools, we tried that everyone did what they know best and get used to the new programme.",
    "oneSentencePitch": "Agentic AI which optimizes your time, summarizes your reunions and identifies the needs of your clients.",
    "githubUrl": "https://github.com/pablocopete/IBM",
    "videoUrl": "https://youtu.be/uXMS-RVz_FA",
    "demoUrl": "https://preview--daily-edge-agent.lovable.app/intelligent",
  },
  {
    "id": "project-5",
    "name": "Bridge AI",
    "case": "IBM",
    "whatIsProject": "The PitchLink AI bridges the gap between the problem pitch by the client with the company to the actual sales and tech persons. Alls the time spent, and information usually lost while trying to get the information from the initial pitch to the relevant persons is prevented. While working on a transcript of the pitch meeting, the granite AI analysis what was said and filters the necessary information for the relevant people and prevents a fast, easy to use handout so that every part in the company instantaneously knows what to do. This reduces on the one hand the amount of time spent on trying to get the relevant information while also is precise and conclusive. Also, the created information can be reviewed later in the process, and no information is lost.",
    "howBuilt": "We built the project using Lovable, which provided the foundation for our development workflow. Through Lovable, we integrated modern technologies such as React.js and Tailwind CSS on the frontend, ensuring a responsive and visually consistent user interface. On the backend, Lovable enabled us to leverage Supabase, powered by PostgreSQL, to handle authentication, real-time updates, and secure data storage. By combining Lovable's ecosystem with these technologies, we achieved a balance between fast prototyping and scalability for production.",
    "difficulties": "The biggest difficulty we faced was to find a problem which is solvable in time to create an outcome that showcases what we want, while staying in the realms of doabiity. So we ventured into different problem spaces and searched for several solution approaches to see how far we would have to go to solve the problem until we settled on our current solution which seems the most relevant because it pretty much is viable for all companies.",
    "oneSentencePitch": "Instead of relying on memory, messy notes, or endless clarification messages, the tool captures the key information from a client pitch and automatically turns it into a structured handoff for teams",
    "githubUrl": "https://github.com/Lunkynono/forge-ui-suite",
    "videoUrl": "https://youtu.be/_V0Bdy74LCE",
    "demoUrl": "https://forge-ui-suite.lovable.app",
  },
  {
    "id": "project-6",
    "name": "AmpelRFP",
    "case": "NTT Data",
    "whatIsProject": "AmpelRFP is a full-stack web application designed for consulting firms and integrators that need to respond to complex tenders. The tool extracts and normalizes the key information from each RFP into a structured summary with citations and confidence levels, organizes deadlines in a timeline, and classifies requirements in a clear matrix. Powered by AI, it generates draft responses from templates and past proposals, quickly showing everything that must be included (CVs, budgets, annexes). Finally, it verifies compliance with a visual traffic-light system and actionable checklist, and enables exporting the final result in the required format.",
    "howBuilt": "In order to build AmpelRFP, we used major AI tools such as ChatGPT and Lovable. To accelerate development we relied on Lovable Cloud & AI, guided with prompts iteratively corrected through ChatGPT. We tested the app with sample RFPs from various sources and coordinated as a team by sharing tasks and findings. Within Lovable, we leveraged built-in APIs to manage data and templates, and used real-time collaboration features to co-edit responses. This combination of AI models, external documents, and Lovable's built-in tools allowed us to streamline RFP analysis, automate draft generation, and ensure compliance efficiently.",
    "difficulties": "The main challenge was the limited time: we arrived without prior preparation and had to learn Lovable on the fly. The biggest technical difficulty was not being able to upload our own RFP, which led us to adapt the workflow: instead of processing real files, we used sample RFPs loaded into the app. This way, requirements are completed directly within the application and, once finalized, the document is generated. Thanks to coordination and a strong focus on the visual side, we delivered an attr",
    "oneSentencePitch": "AmpelRFP is an AI-powered assistant that analyzes RFPs, drafts tailored responses, and gives a traffic-light compliance check to ensure nothing is missed.",
    "githubUrl": "https://github.com/pablozarzomontes6-ctrl/bid-weaver-07.git",
    "videoUrl": "https://youtu.be/_1oum_4tiwg",
    "demoUrl": "http://bid-weaver-07.lovable.app/auth",
    "challenges": [challenges.scientists360],
  },
  {
    "id": "project-7",
    "name": "Ai-powered RFT assistant",
    "case": "NTT Data",
    "whatIsProject": "Our project is an intelligent RFP assistant that revolutionizes how NTT DATA manages and responds to business proposals. The platform automatically analyzes proposal documents, evaluates their technical feasibility based on NTT DATA's capabilities and resources, and generates complete, personalized responses that include feasibility assessments, proposed solutions, cybersecurity considerations, and sustainability aspects. It's specifically designed for NTT DATA's commercial and technical teams, enabling them to respond to proposals faster, more consistently, and more effectively. What makes our project unique is the combination of deep technical analysis with contextualized content generation, all integrated into an intuitive interface that guides users step-by-step.",
    "howBuilt": "We built the platform using Lovable as the main development tool, which allowed us to create a robust and functional web application in record time. We developed an intuitive user interface with predefined and custom components, integrating a dynamic form system that captures all necessary information to generate personalized responses. We implemented a text generation engine that uses smart templates and conditional logic to create responses that maintain NTT DATA's corporate tone. The application includes real-time validations, downloadable document generation, and a data management system that allows reusing information from previous proposals. Lovable facilitated the integration of all these functionalities into a cohesive and professional platform.",
    "difficulties": "The main difficulty was adapting the complex technical feasibility evaluation logic to Lovable's platform limitations, requiring creative solutions to implement analysis algorithms. We also faced challenges in designing the interface to make it sufficiently intuitive while handling multiple complex data flows. The integration of text generation systems that automatically maintained consistency and professionalism required multiple iterations and fine-tuning of templates.",
    "oneSentencePitch": "An intelligent platform that uses AI to analyze business proposals, evaluate their technical feasibility, and generate personalized professional responses for NTT DATA.",
    "githubUrl": "https://github.com/JulioGallego1/ai-rfp-stream",
    "videoUrl": "https://youtu.be/Iny9OKQLyNw?si=iHaEGt-kaBvtNQUR",
    "demoUrl": "https://ai-rfp-stream.lovable.app/",
  },
  {
    "id": "project-8",
    "name": "TalentEcho",
    "case": "Leaping AI",
    "whatIsProject": "In large-scale job applications, companies often miss the chance to assess candidates deeply, overlooking essential soft skills, while applicants struggle to showcase their true value. TalentEcho bridges this gap by offering intelligent pre-screening, helping HR detect inconsistencies in CVs and quickly identify top talent. Beyond basic qualifications, our platform evaluates both technical and soft skills, enabling recruiters to find the perfect candidate efficientlyâeven among thousands of applicantsâwhile giving candidates the opportunity to stand out.",
    "howBuilt": "For the user interface and user experience, we built the front end with Lovable. The backend workflows and automations are powered by n8n. Finally, we integrated Leaping AI to enable seamless real-time voice interactions and conversations.",
    "difficulties": "One of the main challenges was ensuring smooth, low-latency voice interactions. At first, the conversations felt slightly delayed, which broke the natural flow, so we had to optimize the API calls and adjust buffering strategies. Another unexpected difficulty was integrating the three platforms (Lovable for UI, n8n for workflows, and Leaping AI for voice) into a single, cohesive system.",
    "oneSentencePitch": "I voice agent that uncovers true potential, screening candidates beyond resumes in minutes.",
    "githubUrl": "https://github.com/MariaBolumar/leap-form-ai.git",
    "videoUrl": "https://youtube.com/@mariabolumargarcia8885?si=z4YwyR84AgmgV0Pk",
    "demoUrl": "https://leap-form-ai.lovable.app/",
  },
  {
    "id": "project-9",
    "name": "PropoSaurus",
    "case": "NTT Data",
    "whatIsProject": "The AI-Powered RFP Assistant automates the proposal process end-to-end. Upon uploading an RFP, it extracts deadlines, budgets, requirements, and evaluation criteria, then provides a complete AI analysis: fit score, compliance %, risks, profitability, and department routing. Next, the Draft Response Generator creates multiple proposal drafts in different tones (technical, innovative, partnership-focused), ready to customize. Finally, a Collaborative Editor lets teams co-edit in real time while a Compliance Gap Map tracks which requirements are met, missing, or incomplete. This unique blend of automated analysis, smart drafting, and live compliance makes responses faster, more accurate, and collaborative.",
    "howBuilt": "For the hackathon, we used Lovable to rapidly prototype the solution, wireframing user flow, interface, and AI interactions within hours. This produced a working mockup that demonstrated the end-to-end idea: upload â AI analysis â draft generation â collaborative editing with compliance tracking. In a professional rollout, we would build with React, Tailwind, and Vite (frontend); FastAPI (backend); and Supabase for authentication, storage, database, and real-time collaboration. LLM agents would handle extraction, drafting, and compliance scoring, with PyPDF and pgvector embeddings for parsing and semantic mapping. This stack ensures scalability, enterprise security, and seamless multi-user collaboration.",
    "difficulties": "A key challenge was defining the company's real needs, since \"an AI agent for RFPs\" is broad. We had to identify priorities and narrow scope. Another tension was choosing between a functional prototype and a mockup that best reflected our vision under tight time. Balancing workload across members with different skills, and finding tools for the demo video and presentation, added complexity. In the end, prioritization and focus were critical to deliver.",
    "oneSentencePitch": "Transform complex RFPs into instant insights and winning AI-drafted proposals â with a simple overview, one glance fit scoring, compliance checks, risk analysis, and tailored options",
    "githubUrl": "https://github.com/davidoof3141/vlc-cdtm-hackathon.git",
    "videoUrl": "https://www.youtube.com/channel/UCHPeYFxpsQz68C8xPNXNX8g",
    "demoUrl": "https://preview--vlc-cdtm-hackathon.lovable.app/",
    "placement":1
  },
  {
    "id": "project-10",
    "name": "IBMail Analyzer",
    "case": "IBM",
    "whatIsProject": "IBMail analyzer is an AI-driven assistant designed for sales professionals at IBM, helping them manage their inbox more efficiently. The agent detects new emails, generates a concise summary, assigns urgency levels from 1â5, and provides contextual recommendations such as who to contact or which action to take next. In just a click you can go from reading a summary to sending an auto-generated response email. Users can switch between light/dark modes, write secure confidential emails, and view statistics on confidentiality usage through an admin dashboard. What makes it unique is the seamless blend of productivity, confidentiality, and decision support in one unified, user-friendly tool.",
    "howBuilt": "We built the agent using Lovable for rapid prototyping, integrating GPT-based models, such as IBM Granite Instruct, for summarization, classification, and smart recommendations. The frontend relies on React with Tailwind CSS for a clean, responsive UI and features like light/dark mode, and role-based access. A simple authentication layer manages user and admin accounts, while visualization libraries render confidentiality usage data as interactive pie charts. This combination of AI, modern frameworks, and security features allows for a professional-grade, production-ready experience.",
    "difficulties": "We faced challenges balancing AI accuracy with concise outputs. Ensuring removal of redundant confidence metrics, and keeping the interface intuitive under time constraints required iteration. Designing secure confidentiality handling without overcomplicating workflows was another obstacle, which we solved by combining role-based access and aggregate usage data.",
    "oneSentencePitch": "An AI email assistant that transforms cluttered inboxes into clear priorities, empowering IBM sales teams to act faster and smarter.",
    "githubUrl": "https://github.com/vdlbm/inteligent-sales-copilot",
    "videoUrl": "https://youtu.be/5fbOz2qFTdc",
    "demoUrl": "https://inteligent-sales-copilot.lovable.app/login",
  },
  {
    "id": "project-11",
    "name": "Restaurant mAInagement",
    "case": "Leaping AI",
    "whatIsProject": "Our project is a Virtual Waiter voice agent that makes restaurant interactions effortless and inclusive. Customers can ask for opening hours, browse the menu, place orders, or book reservationsâall by speaking naturally, without needing an app. Behind the scenes, restaurant owners can use a companion app to view incoming orders, monitor reservations, and approve bookings. By connecting conversational AI with live restaurant data, our solution delivers a friendly, efficient experience for both diners and restaurant staff.",
    "howBuilt": "We built the customer-facing voice agent using Leaping AI to handle dialogues, scripted prompts, and reservations logic, while Lovable AI was used to develop both the main app interface and the restaurant-owner dashboard. Restaurant dataâincluding menu items, opening hours, orders, and table availabilityâwas stored in a Google Sheet. Function nodes and webhooks connected the agent to the sheet, allowing real-time updates for orders and reservation approvals visible to the restaurant owner.",
    "difficulties": "We faced challenges with synchronization in Leaping AI, as some updates disappeared or were overwritten by other team edits. Limited time made it difficult to design, implement, and integrate both the customer agent and owner app, requiring rapid creative problem-solving. Despite this, we delivered a working MVP demonstrating customer interactions and restaurant-side management.",
    "oneSentencePitch": "A voice-powered virtual waiter that provides restaurant information, takes orders, and handles reservations, while giving restaurant owners a simple app to manage orders and approve bookings.",
    "githubUrl": "https://github.com/QiangXu1564/order-reserve-aid.git",
    "videoUrl": "https://youtube.com/shorts/Q8f1EJYMJ6g?si=7iOmn5rNr8ZRj943",
    "demoUrl": "https://order-reserve-aid.lovable.app",
  },
  {
    "id": "project-12",
    "name": "Watsonx.sales",
    "case": "IBM",
    "whatIsProject": "Watsonx.sales is a unified sales enablement platform designed to supercharge IBM's pre-sales consultants by automating the entire sales cycle. It begins by generating a rich, interactive briefing on any client, synthesizing CRM and real-time web data into actionable insights and tailored watsonx solution mappings. During client meetings, a live meeting assistant acts as a real-time co-pilot, a chatbot that answers complex questions contextualized by pre-uploaded documents like RFPs. Finally, integrated tools are provided to immediately act on these insights, from scheduling meetings to initiating contact workflows, closing the loop from preparation to action.",
    "howBuilt": "The platform's frontend was prototyped in Lovable using Next.js, TypeScript, and Shadcn UI. The core intelligence is architected around IBM's Granite 3.2 model acting as a reasoning agent. For briefings, an ideal workflow uses watsonx.orchestrate to pull CRM data and gather real-time web intelligence. Granite then synthesizes this multi-source data into a final, structured JSON output. The live assistant leverages this context and uploaded documents, allowing Granite to provide accurate, context-aware answers. The entire system is designed for full enterprise integration and scaling with watsonx.data.",
    "difficulties": "Our primary challenge was non-technical: deeply understanding the IBM salesperson's complex workflow to define their true pain points. Architecting a single, cohesive platform for the entire pre-sales cycleâfrom research to live supportâwas a significant UX challenge. Our goal was to create a seamless end-to-end journey, not just a collection of disparate tools, which demanded intense user-centric design and problem-solving.",
    "oneSentencePitch": "Watsonx.sales is an all-in-one AI co-pilot that automates the entire sales cycle for IBM consultants, from generating client briefings to providing live meeting support and orchestrating next steps.",
    "githubUrl": "https://github.com/anboch/watsonx-guide",
    "videoUrl": "https://youtu.be/8G_AYw2D6Vk",
    "demoUrl": "https://watsonxales-briefing-booster.lovable.app",
    "challenges": [challenges.s2grupo],
    "placement": 1
  },
  {
    "id": "project-13",
    "name": "PropUp",
    "case": "NTT Data",
    "whatIsProject": "Se trata de un asistente de RFP impulsado por IA que ayuda a consultoras y empresas de TI a responder propuestas de manera mÃ¡s Ã¡gil y precisa. La aplicaciÃ³n analiza documentos extensos de licitaciÃ³n, extrae requisitos clave (fechas, presupuesto, criterios de evaluaciÃ³n), genera borradores estructurados basados en plantillas y propuestas previas, y verifica la cumplimentaciÃ³n de clÃ¡usulas mediante un checklist automÃ¡tico. EstÃ¡ dirigido a equipos de ventas y consultorÃ­a que enfrentan procesos largos y complejos de RFP, y se diferencia por combinar anÃ¡lisis inteligente, generaciÃ³n de texto y colaboraciÃ³n en tiempo real en una sola herramienta.",
    "howBuilt": "Desarrollamos el MVP en Lovable, con: * **Frontend**: React/Next.js + TypeScript + Tailwind; shadcn/ui for components. * **Backend**: Node (NestJS/Express) with TypeScript. * **DB**: PostgreSQL with Prisma ORM, **pgvector** for embeddings. * **File storage**: S3âcompatible (local/minio acceptable for MVP). * **Realtime**: WebSockets; use **Yjs** CRDT (yâwebsocket) for coâediting. * **Search/RAG**: OpenAI/compatible embeddings â pgvector; chunked documents. * **Auth**: Email magic link (and Google SSO if trivial). JWT sessions. * **Docs**: PDF/DOCX ingestion; Tesseract or cloud OCR for scanned PDFs.",
    "difficulties": "El reto de intentar una y otra vez generar un prompt adecuado para que la IA entienda realmente la funcionalidad que queremos darle. AÃ±adÃ­a nuevas funcionalidades que no iban, no era lo que pedÃ­amos o simplemente no cambiaba nada.",
    "oneSentencePitch": "Un asistente de IA que automatiza el anÃ¡lisis, redacciÃ³n y validaciÃ³n de RFPs, reduciendo errores y acelerando el tiempo de respuesta.",
    "githubUrl": "https://...",
    "videoUrl": "https://youtu.be/RdW7pvYOUVs",
    "demoUrl": "https://rfp-genius-92.lovable.app",
  },
  {
    "id": "project-14",
    "name": "VoiceBit",
    "case": "Leaping AI",
    "whatIsProject": "VoiceBite is a voice-guided restaurant booking platform that makes the reservation process simple and accessible for everyone, with a special focus on blind and visually impaired users. Through natural voice interaction, users can specify their preferred area, cuisine type, or dietary restrictions, such as allergies or vegetarian options. The AI voice assistant guides them step by step through searching, selecting, and booking a restaurant, removing the barriers that traditional websites often present. What makes VoiceBite unique is its inclusive design, turning a complex digital process into a smooth and intuitive experience for all.",
    "howBuilt": "VoiceBite was developed using the Leaping AI platform to implement the voice agent, connected to the Aircall telephony API for real-time calls. The restaurant search and filtering logic is handled by a series of junctions between stages, which, at the same time are connected to a simulated restaurant database (with options for food preferences and accessibility tags). The web interface is designed to work entirely through voice interaction.",
    "difficulties": "The main challenge was designing a conversational flow that feels natural and accessible, avoiding robotic responses and keeping interactions clear for blind users. We also faced technical difficulties with voice latency and integrating external APIs for restaurant searches. In general, we struggled with the syntaxis of the program itself as it was the first time we were approaching a challenge using this tool.",
    "oneSentencePitch": "VoiceBite is a voice app that enables blind people and anyone who struggles with websites to book restaurants in a simple and accessible way.",
    "githubUrl": "https://voicebite.lovable.app/",
    "videoUrl": "https://youtu.be/qXqsJnVi4FE",
    "demoUrl": "https://voicebite.lovable.app/",
  },
  {
    "id": "project-15",
    "name": "PhonLinked",
    "case": "Leaping AI",
    "whatIsProject": "Our idea is to create a service (either a Leaping feature or a separate service that uses it) where customers with no knowledge of block programming or no time to devote to it can generate an AI-based voice agent with equally organic and fluid results. With just a few text inputs, small freelancers or innovators who are new to the world of AI will be able to automate customer service so they can focus solely on the product and growing ideas with potential. The model will undergo further training, during which our employees will test it and review any aspects that need improvement until the final product is achieved. This example is an agent that acts as a troubleshooter for an appliance company, providing adapted aid for the costumer in fixing his model.",
    "howBuilt": "We connected our website created using Lovable to the Leaping AI API and obtained the necessary token with a curl command. We made sure that it could create default agents, and then we implemented a text box through which a snapshot (specific configuration) of an agent is created within Leaping AI. The stages of this snapshot are automatically generated from the prompt that the customer enters into the text box, specifying their preferences. This imports an agent that meets the customer's requirements without having to get into block programming.",
    "difficulties": "Basically, the difficulties we encountered were with the functioning of the Leaping AI platform because it kept kicking us out and wouldn't allow us to save and import agents properly. The modifications we achieved via Lovable were blocked by Leaping due to errors we didn't understand, but with more refined prompts based on trial and error and a methodical process, we finally succeeded.",
    "oneSentencePitch": "Virtual Voice Agent generator service implementing Lovable and LeapingAI.",
    "githubUrl": "https://github.com/Polaitet/call-artisan.git",
    "videoUrl": "https://youtu.be/hjohDxDohLA",
    "demoUrl": "https://github.com/Polaitet/call-artisan.git",
  }
];
